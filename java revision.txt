import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class JSONSchemaResolver {
    private static ObjectMapper objectMapper = new ObjectMapper();
    private static Map<String, JsonNode> resolvedDefinitions = new HashMap<>();

    public static void main(String[] args) throws Exception {
        String jsonSchema = "<Your JSON Schema>";

        JsonNode schemaNode = objectMapper.readTree(jsonSchema);
        JsonNode resolvedSchema = resolveReferences(schemaNode);
        String resolvedJsonSchema = objectMapper.writeValueAsString(resolvedSchema);
        System.out.println(resolvedJsonSchema);
    }

    private static JsonNode resolveReferences(JsonNode node) {
        if (node.isObject()) {
            ObjectNode objectNode = (ObjectNode) node;

            if (objectNode.has("$ref")) {
                String ref = objectNode.get("$ref").asText();
                if (ref.startsWith("#/definitions/")) {
                    String definitionName = ref.substring("#/definitions/".length());
                    if (resolvedDefinitions.containsKey(definitionName)) {
                        return resolvedDefinitions.get(definitionName);
                    } else {
                        String[] definitionPath = definitionName.split("/");
                        JsonNode definitionNode = node.at("/definitions/" + definitionPath[0]);
                        if (definitionNode.isObject()) {
                            ObjectNode resolvedDefinitionNode = objectMapper.createObjectNode();
                            Iterator<Map.Entry<String, JsonNode>> fields = definitionNode.fields();
                            while (fields.hasNext()) {
                                Map.Entry<String, JsonNode> entry = fields.next();
                                resolvedDefinitionNode.set(entry.getKey(), resolveReferences(entry.getValue()));
                            }
                            resolvedDefinitions.put(definitionName, resolvedDefinitionNode);
                            return resolvedDefinitionNode;
                        }
                    }
                }
            }

            Iterator<Map.Entry<String, JsonNode>> fields = objectNode.fields();
            while (fields.hasNext()) {
                Map.Entry<String, JsonNode> entry = fields.next();
                JsonNode fieldValue = entry.getValue();
                objectNode.set(entry.getKey(), resolveReferences(fieldValue));
            }
        }

        if (node.isArray()) {
            for (int i = 0; i < node.size(); i++) {
                JsonNode item = node.get(i);
                ((ArrayNode) node).set(i, resolveReferences(item));
            }
        }

        return node;
    }
}