import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;

import java.io.IOException;
import java.util.Iterator;
import java.util.Map;

public class JsonSchemaResolver {

    private static ObjectMapper objectMapper = new ObjectMapper();

    public static void main(String[] args) throws IOException {
        String jsonSchema = "{...}"; // Replace with your JSON schema
        JsonNode schemaNode = objectMapper.readTree(jsonSchema);
        resolveRefsRecursively(schemaNode, schemaNode);
        String resolvedSchema = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(schemaNode);
        System.out.println(resolvedSchema);
    }

    private static void resolveRefsRecursively(JsonNode rootSchema, JsonNode currentSchema) {
        if (currentSchema.isObject()) {
            ObjectNode objectNode = (ObjectNode) currentSchema;
            if (objectNode.has("$ref")) {
                String refPath = objectNode.get("$ref").asText();
                JsonNode refSchema = resolveRef(rootSchema, refPath);
                objectNode.remove("$ref");
                objectNode.setAll((ObjectNode) refSchema);
                resolveRefsRecursively(rootSchema, objectNode);
            } else {
                Iterator<Map.Entry<String, JsonNode>> fields = objectNode.fields();
                while (fields.hasNext()) {
                    Map.Entry<String, JsonNode> field = fields.next();
                    resolveRefsRecursively(rootSchema, field.getValue());
                }
            }
        } else if (currentSchema.isArray()) {
            for (JsonNode item : currentSchema) {
                resolveRefsRecursively(rootSchema, item);
            }
        }
    }

    private static JsonNode resolveRef(JsonNode schema, String refPath) {
        String[] parts = refPath.split("/");
        JsonNode refSchema = schema;
        for (String part : parts) {
            if (!part.isEmpty()) {
                refSchema = refSchema.get(part);
            }
        }
        return refSchema;
    }
}
