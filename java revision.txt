import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.DefaultGeneratorSettings;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector;
import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;
import com.fasterxml.jackson.module.jsonSchema.JsonSchema;
import com.fasterxml.jackson.module.jsonSchema.JsonSchemaGenerator;
import com.fasterxml.jackson.module.jsonSchema.factories.SchemaFactoryWrapper;

public class JsonSchemaValidator {
    public static void main(String[] args) {
        try {
            // Create ObjectMapper with custom configuration
            ObjectMapper objectMapper = new ObjectMapper();
            objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
            objectMapper.setAnnotationIntrospector(new NopAnnotationIntrospector() {
                @Override
                public boolean hasIgnoreMarker(Annotated m) {
                    return false;
                }
            });

            // Create custom DefaultGenerationConfig
            DefaultGenerationConfig config = new DefaultGenerationConfig() {
                @Override
                public VisibilityChecker<?> getDefaultVisibilityChecker() {
                    return VisibilityChecker.Std.defaultInstance().withFieldVisibility(JsonAutoDetect.Visibility.ANY);
                }

                @Override
                public TypeResolverBuilder<?> getDefaultTyper(MapperConfig<?> config) {
                    return new StdTypeResolverBuilder().init(JsonTypeInfo.Id.CLASS, null);
                }
            };

            // Create JsonSchemaGenerator with custom configuration
            JsonSchemaGenerator schemaGenerator = new JsonSchemaGenerator(objectMapper, config);

            // Generate JSON schema from POJO
            JsonSchema jsonSchema = schemaGenerator.generateSchema(YourPOJO.class);

            // Validate JSON sample against the schema
            objectMapper.readValue(jsonSample, YourPOJO.class);

            System.out.println("JSON sample is valid.");
        } catch (Exception e) {
            System.out.println("JSON sample is not valid: " + e.getMessage());
        }
    }
}
