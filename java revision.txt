import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.github.fge.jsonschema.core.exceptions.ProcessingException;
import com.github.fge.jsonschema.core.report.ProcessingReport;
import com.github.fge.jsonschema.main.JsonSchema;
import com.github.fge.jsonschema.main.JsonSchemaFactory;

import java.io.IOException;
import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;

public class Main {
    public static void main(String[] args) {
        String jsonData = "{\"id\": 1, \"name\": \"John\", \"price\": 9.99}";

        // Load JSON schema
        JsonNode schemaNode = loadSchema();
        if (schemaNode == null) {
            System.out.println("Failed to load JSON schema");
            return;
        }

        // Validate JSON against schema
        if (!validateJson(jsonData, schemaNode)) {
            System.out.println("JSON data is invalid");
            return;
        }

        // Parse JSON into POJO
        ObjectMapper objectMapper = new ObjectMapper();
        Product product;
        try {
            product = objectMapper.readValue(jsonData, Product.class);
        } catch (IOException e) {
            System.out.println("Failed to parse JSON into POJO");
            return;
        }

        // Validate POJO
        Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
        Set<ConstraintViolation<Product>> violations = validator.validate(product);
        if (violations.isEmpty()) {
            System.out.println("JSON data is valid");
        } else {
            System.out.println("JSON data is invalid");
            for (ConstraintViolation<Product> violation : violations) {
                System.out.println(violation.getPropertyPath() + " " + violation.getMessage());
            }
        }
    }

    private static JsonNode loadSchema() {
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            return objectMapper.readTree(Main.class.getResourceAsStream("/product-schema.json"));
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    private static boolean validateJson(String jsonData, JsonNode schemaNode) {
        JsonSchemaFactory schemaFactory = JsonSchemaFactory.byDefault();
        JsonSchema schema;
        try {
            schema = schemaFactory.getJsonSchema(schemaNode);
        } catch (ProcessingException e) {
            e.printStackTrace();
            return false;
        }

        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode;
        try {
            jsonNode = objectMapper.readTree(jsonData);
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }

        ProcessingReport report;
        try {
            report = schema.validate(jsonNode);
        } catch (ProcessingException e) {
            e.printStackTrace();
            return false;
        }

        return report.isSuccess();
    }
}
