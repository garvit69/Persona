import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class JSONSchemaResolver {
    private static ObjectMapper objectMapper = new ObjectMapper();
    private static Map<String, JsonNode> resolvedDefinitions = new HashMap<>();

    public static void main(String[] args) throws Exception {
        String jsonSchema = "{\n" +
                "  \"schema\": \"http://ison-schema.org/draft-07/schema#\",\n" +
                "  \"description\": \"Sample Desc\",\n" +
                "  \"type\": \"object\",\n" +
                "  \"properties\": {\n" +
                "    \"$ref\": \"#/definitions/BusinessApplicationHeaderVo2\"\n" +
                "  },\n" +
                "  \"definitions\": {\n" +
                "    \"BusinessApplicationHeaderVo2\": {\n" +
                "      \"description\": \"Sample Desc\",\n" +
                "      \"type\": \"object\",\n" +
                "      \"properties\": {\n" +
                "        \"charset\": {\n" +
                "          \"description\": \"Sample Desc\",\n" +
                "          \"type\": \"string\"\n" +
                "        },\n" +
                "        \"fr\": {\n" +
                "          \"description\": \"Sample Desc\",\n" +
                "          \"$ref\": \"#/definitions/Party39\"\n" +
                "        },\n" +
                "        \"to\": {\n" +
                "          \"description\": \"Sample Desc\",\n" +
                "          \"$ref\": \"#/definitions/Party39\"\n" +
                "        },\n" +
                "        \"bizMsgIdr\": {\n" +
                "          \"description\": \"Sample Desc\",\n" +
                "          \"type\": \"string\",\n" +
                "          \"minLength\": 1,\n" +
                "          \"maxLength\": 35\n" +
                "        }\n" +
                "      }\n" +
                "    },\n" +
                "    \"Party39\": {\n" +
                "      \"type\": \"object\",\n" +
                "      \"$ref\": \"#/definitions/Party39Party\"\n" +
                "    },\n" +
                "    \"Party39Party\": {\n" +
                "      \"type\": \"string\"\n" +
                "    }\n" +
                "  }\n" +
                "}";

        JsonNode schemaNode = objectMapper.readTree(jsonSchema);
        JsonNode resolvedSchema = resolveReferences(schemaNode);
        String resolvedJsonSchema = objectMapper.writeValueAsString(resolvedSchema);
        System.out.println(resolvedJsonSchema);
    }

    private static JsonNode resolveReferences(JsonNode node) {
        if (node.isObject()) {
            ObjectNode objectNode = (ObjectNode) node;

            if (objectNode.has("$ref")) {
                String ref = objectNode.get("$ref").asText();
                if (ref.startsWith("#/definitions/")) {
                    String definitionName = ref.substring("#/definitions/".length());
                    if (resolvedDefinitions.containsKey(definitionName)) {
                        return resolvedDefinitions.get(definitionName);
                    } else {
                        JsonNode definitionNode = node.get("definitions").get(definitionName);
                        resolvedDefinitions.put(definitionName, definitionNode);
                        JsonNode resolvedDefinitionNode = resolveReferences(definitionNode);
                        resolvedDefinitions.put(definitionName, resolvedDefinitionNode);
                        return resolvedDefinitionNode;
                    }
                }
            }

            Iterator<Map.Entry<String, JsonNode>> fields = objectNode.fields();
            while (fields.hasNext()) {
                Map.Entry<String, JsonNode> entry = fields.next();
                JsonNode fieldValue = entry.getValue();
                objectNode.set(entry.getKey(), resolveReferences(fieldValue));
            }
        }

        if (node.isArray()) {
            for (int i = 0; i < node.size(); i++) {
                JsonNode item = node.get(i);
                ((ArrayNode) node).set(i, resolveReferences(item));
            }
        }

        return node;
    }
}


