import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

public class JsonSchemaResolver {
    private static final String REF_PROPERTY = "$ref";

    private final Map<String, JsonNode> resolvedSchemas = new HashMap<>();

    public JsonNode resolveSchema(String schemaPath) throws IOException, URISyntaxException {
        ObjectMapper mapper = new ObjectMapper();
        JsonNode root = mapper.readTree(Files.newInputStream(Paths.get(schemaPath)));
        return resolveReferences(root);
    }

    private JsonNode resolveReferences(JsonNode node) throws IOException, URISyntaxException {
        if (node.isObject()) {
            JsonNode refNode = node.get(REF_PROPERTY);
            if (refNode != null) {
                String refPath = refNode.asText();
                if (!resolvedSchemas.containsKey(refPath)) {
                    URI refUri = new URI(refPath);
                    String refSchemaPath = refUri.getSchemeSpecificPart();
                    JsonNode refSchema = resolveSchema(refSchemaPath);
                    resolvedSchemas.put(refPath, refSchema);
                }
                JsonNode refSchema = resolvedSchemas.get(refPath);
                return mergeSchemas(node, refSchema);
            } else {
                node.fields().forEachRemaining(entry -> {
                    JsonNode childNode = entry.getValue();
                    JsonNode resolvedChildNode = resolveReferences(childNode);
                    entry.setValue(resolvedChildNode);
                });
            }
        } else if (node.isArray()) {
            for (int i = 0; i < node.size(); i++) {
                JsonNode arrayElement = node.get(i);
                JsonNode resolvedArrayElement = resolveReferences(arrayElement);
                node.set(i, resolvedArrayElement);
            }
        }
        return node;
    }

    private JsonNode mergeSchemas(JsonNode node, JsonNode refSchema) {
        JsonNode mergedNode = refSchema.deepCopy();
        node.fields().forEachRemaining(entry -> {
            String fieldName = entry.getKey();
            JsonNode fieldValue = entry.getValue();
            mergedNode.set(fieldName, fieldValue);
        });
        return mergedNode;
    }
}
