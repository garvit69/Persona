import org.json.JSONObject;

public class JsonPathGenerator {
    public static void main(String[] args) {
        String jsonSchema = "{...}"; // Replace with your JSON schema
        JSONObject schemaObject = new JSONObject(jsonSchema);
        JSONObject resolvedSchema = resolveReferences(schemaObject, schemaObject);

        generatePaths("", resolvedSchema);
    }

    private static JSONObject resolveReferences(JSONObject schema, JSONObject rootSchema) {
        if (schema.has("$ref")) {
            String ref = schema.getString("$ref");
            JSONObject referencedSchema = resolveReference(ref, rootSchema);
            return resolveReferences(referencedSchema, rootSchema);
        } else if (schema.has("properties")) {
            JSONObject properties = schema.getJSONObject("properties");
            for (String key : properties.keySet()) {
                JSONObject property = properties.getJSONObject(key);
                properties.put(key, resolveReferences(property, rootSchema));
            }
        } else if (schema.has("items")) {
            JSONObject items = schema.getJSONObject("items");
            schema.put("items", resolveReferences(items, rootSchema));
        }
        return schema;
    }

    private static JSONObject resolveReference(String ref, JSONObject rootSchema) {
        if (ref.startsWith("#")) {
            String[] path = ref.substring(2).split("/");
            JSONObject current = rootSchema;
            for (String segment : path) {
                current = current.getJSONObject(segment);
            }
            return current;
        } else {
            // Handle external references if needed
            return null;
        }
    }

    private static void generatePaths(String currentPath, JSONObject jsonObject) {
        for (String key : jsonObject.keySet()) {
            String newPath = currentPath.isEmpty() ? key : currentPath + "/" + key;
            System.out.println(newPath);

            Object value = jsonObject.get(key);
            if (value instanceof JSONObject) {
                generatePaths(newPath, (JSONObject) value);
            }
        }
    }
}
