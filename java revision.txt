import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.fge.jackson.JsonLoader;

import java.io.IOException;
import java.util.Iterator;
import java.util.Map;

public class JsonSchemaResolver {

    private static final ObjectMapper mapper = new ObjectMapper();

    public static JsonNode resolveRefs(JsonNode schema) throws IOException {
        if (schema.has("$ref")) {
            String ref = schema.get("$ref").asText();
            schema = resolveReference(schema, ref);
        }

        if (schema.has("properties")) {
            JsonNode propertiesNode = schema.get("properties");
            Iterator<Map.Entry<String, JsonNode>> properties = propertiesNode.fields();
            while (properties.hasNext()) {
                Map.Entry<String, JsonNode> property = properties.next();
                JsonNode resolvedProperty = resolveRefs(property.getValue());
                property.setValue(resolvedProperty);
            }
        }

        if (schema.has("definitions")) {
            JsonNode definitionsNode = schema.get("definitions");
            Iterator<Map.Entry<String, JsonNode>> definitions = definitionsNode.fields();
            while (definitions.hasNext()) {
                Map.Entry<String, JsonNode> definition = definitions.next();
                JsonNode resolvedDefinition = resolveRefs(definition.getValue());
                definition.setValue(resolvedDefinition);
            }
        }

        return schema;
    }

    private static JsonNode resolveReference(JsonNode schema, String ref) throws IOException {
        if (ref.startsWith("#/definitions/")) {
            String definitionName = ref.substring("#/definitions/".length());
            JsonNode definitionsNode = schema.get("definitions");
            if (definitionsNode != null && definitionsNode.has(definitionName)) {
                JsonNode referencedDefinition = definitionsNode.get(definitionName);
                return resolveRefs(referencedDefinition);
            }
        }

        return schema;
    }

    public static void main(String[] args) {
        try {
            String jsonSchemaString = "{ \"type\": \"object\", \"properties\": { \"person\": { \"$ref\": \"#/definitions/person\" }, \"address\": { \"$ref\": \"#/definitions/address\" } }, \"definitions\": { \"person\": { \"type\": \"object\", \"properties\": { \"name\": { \"type\": \"string\" } } }, \"address\": { \"type\": \"object\", \"properties\": { \"street\": { \"type\": \"string\" }, \"city\": { \"type\": \"string\" } } } } }";
            JsonNode jsonSchema = JsonLoader.fromString(jsonSchemaString);
            JsonNode resolvedSchema = resolveRefs(jsonSchema);
            String resolvedSchemaString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(resolvedSchema);
            System.out.println(resolvedSchemaString);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}