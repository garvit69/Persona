import org.json.JSONObject;

public class JsonSampleGenerator {
    public static void main(String[] args) {
        String jsonSchema = "{...}"; // Replace with your JSON schema
        JSONObject schemaObject = new JSONObject(jsonSchema);
        JSONObject resolvedSchema = resolveReferences(schemaObject, schemaObject);

        JSONObject jsonSample = generateJsonSample(resolvedSchema);
        System.out.println(jsonSample.toString(4));
    }

    private static JSONObject resolveReferences(JSONObject schema, JSONObject rootSchema) {
        if (schema.has("$ref")) {
            String ref = schema.getString("$ref");
            JSONObject referencedSchema = resolveReference(ref, rootSchema);
            return resolveReferences(referencedSchema, rootSchema);
        } else if (schema.has("properties")) {
            JSONObject properties = schema.getJSONObject("properties");
            for (String key : properties.keySet()) {
                JSONObject property = properties.getJSONObject(key);
                properties.put(key, resolveReferences(property, rootSchema));
            }
        } else if (schema.has("items")) {
            JSONObject items = schema.getJSONObject("items");
            schema.put("items", resolveReferences(items, rootSchema));
        }
        return schema;
    }

    private static JSONObject resolveReference(String ref, JSONObject rootSchema) {
        if (ref.startsWith("#")) {
            String[] path = ref.substring(2).split("/");
            JSONObject current = rootSchema;
            for (String segment : path) {
                current = current.getJSONObject(segment);
            }
            return current;
        } else {
            // Handle external references if needed
            return null;
        }
    }

    private static JSONObject generateJsonSample(JSONObject schema) {
        JSONObject sample = new JSONObject();
        if (schema.has("type") && schema.getString("type").equals("object")) {
            if (schema.has("properties")) {
                JSONObject properties = schema.getJSONObject("properties");
                for (String key : properties.keySet()) {
                    JSONObject propertySchema = properties.getJSONObject(key);
                    sample.put(key, generateJsonSample(propertySchema));
                }
            }
        } else if (schema.has("type") && schema.getString("type").equals("array")) {
            JSONObject items = schema.getJSONObject("items");
            sample.put("sampleArray", new JSONObject());
        } else {
            sample.put("", getEmptyValue(schema));
        }
        return sample;
    }

    private static Object getEmptyValue(JSONObject schema) {
        if (schema.has("enum")) {
            JSONArray enumValues = schema.getJSONArray("enum");
            if (enumValues.length() > 0) {
                return enumValues.get(0);
            }
        }
        if (schema.has("type")) {
            String type = schema.getString("type");
            if (type.equals("string")) {
                return "";
            } else if (type.equals("number")) {
                return 0;
            } else if (type.equals("integer")) {
                return 0;
            } else if (type.equals("boolean")) {
                return false;
            }
        }
        return null;
    }
}
