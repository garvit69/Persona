import com.github.fge.jsonschema.core.ref.JsonRef;
import com.github.fge.jsonschema.core.tree.SchemaTree;
import com.github.fge.jsonschema.main.JsonSchemaFactory;
import com.github.fge.jsonschema.core.load.configuration.LoadingConfiguration;
import com.github.fge.jsonschema.core.load.uri.URITranslatorConfiguration;
import com.github.fge.jsonschema.core.report.ProcessingReport;
import com.github.fge.jsonschema.main.JsonSchema;
import com.github.fge.jsonschema.main.JsonValidator;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.io.IOException;
import java.net.URI;

public class JsonSchemaResolver {

    public static void main(String[] args) throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();

        // Load the JSON schema
        JsonNode schemaNode = objectMapper.readTree(new File("path/to/your/schema.json"));

        // Load the JSON data
        JsonNode dataNode = objectMapper.readTree(new File("path/to/your/data.json"));

        // Configure the schema factory
        URITranslatorConfiguration translatorCfg = URITranslatorConfiguration.newBuilder().build();
        LoadingConfiguration loadingCfg = LoadingConfiguration.newBuilder().setURITranslatorConfiguration(translatorCfg).freeze();
        JsonSchemaFactory factory = JsonSchemaFactory.newBuilder().setLoadingConfiguration(loadingCfg).freeze();

        // Create a schema tree
        SchemaTree schemaTree = factory.getSchema(schemaNode);

        // Create a JSON schema
        JsonSchema schema = factory.getJsonSchema(schemaTree);

        // Validate the JSON data against the schema
        JsonValidator validator = factory.getValidator();
        ProcessingReport report = validator.validate(schema, dataNode);

        // Print the validation report
        System.out.println(report);
    }
}
